			+--------------------+
			|       ECE 434      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sewon Chung <sc1205@scarletmail.rutgers.edu>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

http://stackoverflow.com/questions/10067510/fixed-point-arithmetic-in-c-programming
http://web.stanford.edu/class/cs140/projects/pintos/pintos_7.html#SEC133
http://www.techonthenet.com/c_language/constants/create_define.php
http://www.cprogramming.com/tutorial/cpreprocessor.html
https://gcc.gnu.org/onlinedocs/cpp/

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In timer.c:
static struct list sleeping - contains all sleeping threads

In thread.h/struct thread:
int64_t alarm_ticks - gives when the thread should wake up

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Answer:
In timer_sleep()
-check to see if ticks are valid(> 0); if not, return
-disable interrupts
-get current thread
-calculate when the thread should wake up
-insert thread into an ordered list
-block thread
-enable interrupts

In timer interrupt handler
-increment ticks
-loop start
-check if list is not empty
-look at front of sleeping list
-check if the front thread's alarm_ticks > ticks
-if yes, then remove thread from sleeping list and wake it up.
-repeat loop until all threads that need to woken up are woken up

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
Answer: Keeping the sleeping list sorted by alarm_ticks helps keep time spent in the timer interrupt handler to a minimum because you don't have to iterate through the entire list each call on timer interrupt handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Answer: disabling interrupts in the critical section of timer_sleep() prevents any race conditions from happening.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Answer: same as last question. No race conditions can happen when interrupts are disabled.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Answer: I considered two designs before this one. One design took advantage of an already
existing function: thread_foreach and the other design had the sleeping list unsorted.
After testing with printf, I saw that the timer interrupt handler was called on frequently
(every tick) which makes sense since the OS would have to check frequently whether a thread 
should wake up. The thread_foreach would have to iterate through each thread, sleeping or 
not, on each timer interrupt handler call. The unsorted sleeping list would have the OS 
iterate through each sleeping thread on each timer interrupt call. With the list sorted in 
ascending order by alarm_ticks, the OS only has to look at the front of the list to see if 
any threads should wake up. I also thought of using semaphores to sleep and wake up a 
thread but then I would have to create a new semaphore in each thread which would take up
memory so I decided on just using the simpler thread block and unblock.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
  
>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Answer: By keeping the ready list in a descending sorted order by highest priority so that the front elem in ready list is the thread with the most priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Answer: A potential race condition is if while the thread_set_priority is updating the 
priority to set a new priority, thread_get_priority is also called to get the priority and 
it would be up to chance if you get the old priority or new priority. Disabling interrupts 
makes it impossible for the race condition to happen. Yes you could use a lock for this 
race condition. Set a lock that only set_priority or get_priority can use at one time.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   0   0   63  61  59     A
 4     4   0   0   62  61  59     A
 8     8   0   0   61  61  59     B
12     12  4   0   60  61  59     A
16     12  4   0   60  60  59     B
20     12  8   0   60  59  59     A
24     16  8   0   59  59  59     C
28     16  8   4   59  59  58     B
32     16  12  4   59  58  58     A
36     20  12  4   58  58  58     C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

ANSWER: It didn't specify what to do if two threads have the same priority. If the running
thread and the front thread on the ready list have the same priority then keep the running
thread going.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?



---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

ANSWER: 
>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

ANSWER: I used macros to implement the fixed point math because I didn't want to make 
actual functions for the fixed point arithmetic. Employing a cpp file to expand the functions in an h file would have required me to change the makefile.build file and I didn't want to change the 
			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
